local module = {}

module["Name"] = "Chronicles VIP"

-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Variables for X-ray effect
local XRAY_TRANSPARENCY = 0.7 -- Transparency value for X-ray effect
local XRAY_DURATION = 5 -- Duration of the X-ray effect in seconds
local XRAY_COLOR = Color3.fromRGB(0, 191, 255) -- Blue tint color for X-ray effect

-- Passwords management
local passwords = {
    "Brandon23", -- Example password
    "XD",      -- Example password
    "F0llow"     -- Example password
}
local passwordEntered = false -- Track if any valid password has been entered

-- Function to toggle the X-ray effect
local function toggleXray(state)
    for _, part in pairs(Workspace:GetDescendants()) do
        if part:IsA("BasePart") then
            if state then
                -- Store original properties
                part:SetAttribute("OriginalTransparency", part.Transparency)
                part:SetAttribute("OriginalColor", part.Color)
                -- Set transparency and color to simulate X-ray effect
                part.Transparency = XRAY_TRANSPARENCY
                part.Color = XRAY_COLOR
            else
                -- Restore original properties
                local originalTransparency = part:GetAttribute("OriginalTransparency")
                local originalColor = part:GetAttribute("OriginalColor")
                if originalTransparency ~= nil then
                    part.Transparency = originalTransparency
                end
                if originalColor ~= nil then
                    part.Color = originalColor
                end
            end
        end
    end
    
    -- Handle cooldown only if X-rays are turned on
    if state then
        -- Set a timer to revert the X-ray effect after XRAY_DURATION seconds
        delay(XRAY_DURATION, function()
            toggleXray(false)
        end)
    end
end

-- Rare Egg ESP with Through Walls Visibility
workspace.ChildAdded:Connect(function(ch)
    if ch:FindFirstChild("RareEffect") then
        -- Notify that a rare egg has been detected
        print("Rare egg detected with RareEffect...")

        -- Ensure the rare egg has loaded completely
        repeat
            task.wait(1)
        until ch:IsDescendantOf(workspace)

        if not ch:FindFirstChild("RareEggESP") then
            local highlight = Instance.new("BoxHandleAdornment", ch)
            highlight.Name = "RareEggESP"
            highlight.Adornee = ch
            highlight.Size = Vector3.new(4, 8, 4)  -- Adjust size as needed
            highlight.AlwaysOnTop = true
            highlight.ZIndex = 1
            highlight.Transparency = 0.5  -- Adjust transparency for through-wall visibility
            highlight.Color3 = Color3.fromRGB(255, 255, 0)  -- Yellow color for ESP

            -- Track the rare egg's existence
            task.spawn(function()
                while ch and ch.Parent do
                    task.wait(0.1)
                end
                if highlight then
                    highlight:Destroy()
                end
            end)
        end

        -- Notify that the Rare Egg ESP has been applied
        print("Rare Egg ESP applied.")
        end)
    end
end

-- test muhahaha
module[7] = {
    Type = "ButtonGrid",
    Toggleable = true,
    Args = {1, {
        RareEggESP = function()
            if script.Parent:FindFirstChild("RareEggESP") then
                for _, i in ipairs(script.Parent:GetChildren()) do
                    if i.Name == "RareEggESP" then
                        i:Destroy()
                    end
                end
                print("Rare Egg ESP disabled.")
            else
                print("Rare Egg ESP enabled.")

                workspace.ChildAdded:Connect(function(ch)
                    if ch:FindFirstChild("RareEffect") then
                        -- Ensure the rare egg has loaded completely
                        repeat
                            task.wait(1)
                        until ch:IsDescendantOf(workspace)

                        if not ch:FindFirstChild("RareEggESP") then
                            local highlight = Instance.new("BoxHandleAdornment", ch)
                            highlight.Name = "RareEggESP"
                            highlight.Adornee = ch
                            highlight.Size = Vector3.new(4, 8, 4)  -- Adjust size as needed
                            highlight.AlwaysOnTop = true
                            highlight.ZIndex = 1
                            highlight.Transparency = 0.5  -- Adjust transparency for through-wall visibility
                            highlight.Color3 = Color3.fromRGB(255, 255, 0)  -- Yellow color for ESP

                            -- Track the rare egg's existence
                            task.spawn(function()
                                while ch and ch.Parent do
                                    task.wait(0.1)
                                end
                                if highlight then
                                    highlight:Destroy()
                                end
                            end)
                        end
                    end
                end)
            end
        end,
    }},
})

-- Module 1: X-ray Toggle with Password Protection
module[1] = {
    Type = "Toggle",
    Args = {"X-ray [Last Only 5s]", function(Self)
        if passwordEntered then
            local state = not Xrays -- Toggle state
            Xrays = state
            toggleXray(state)
        else
            -- Notify user to enter a valid password
            print("Please enter a valid password.")
        end
    end}
}

-- Module 2: Password Input
module[2] = {
    Type = "Input",
    Args = {"Enter Password", "Submit", function(Self, text)
        local validPassword = false

        -- Check if the entered password matches any valid password
        for _, pw in ipairs(passwords) do
            if text == pw then
                validPassword = true
                passwordEntered = true
                print("Password accepted. Access granted.")
                module[1].Enabled = true  -- Enable X-ray toggle after correct password
                return
            end
        end
        
        if not validPassword then
            print("Incorrect password. Access denied.")
            passwordEntered = false
            module[1].Enabled = false  -- Disable X-ray toggle if password is incorrect
        end
    end}
}

-- Module 3: Hold Everyone Hostages Button
module[3] = {
    Type = "Button",
    Args = {"Hold Everyone Hostages", function(Self)
        if passwordEntered then
            local localplayer = Players.LocalPlayer
            local localTeam = localplayer.Team
            
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= localplayer then
                    if localTeam == nil or player.Team ~= localTeam then
                        local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                        if humanoidRootPart then
                            humanoidRootPart.Anchored = true
                            humanoidRootPart.CFrame = localplayer.Character.HumanoidRootPart.CFrame + localplayer.Character.HumanoidRootPart.CFrame.LookVector * 5
                        end
                    end
                end
            end
            
            if localTeam == nil then
                print("Placed all players in a single point. Kill everyone at once once you decide to.")
            else
                print("Placed all players not on your team in a single point. Kill everyone at once once you decide to.")
            end
        else
            print("Please enter a valid password.")
        end
    end}
}

-- Module 5: Information Text
module[5] = {
    Type = "Text",
    Args = {"Made By Brandon Jay | Tiktok: @brx12k"}
}

module[6] = {
    Type = "Button",
    Args = {"Get Egg", function(Self)
        local function getPlayerCharacter()
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            return character
        end    

        local function getCurrentMap()
            for i, v in pairs(game.Workspace:GetDescendants()) do
                if v:IsA("Model") and v.Name == "Spawns" and v.Parent.Name ~= "Lobby" then
                    return v.Parent
                end    
            end    
        end  

        local function checkMap()
            local map = getCurrentMap()
            if type(map) == "nil" then
                repeat map = getCurrentMap() wait() until type(map) ~= "nil"
            end   
            return true
        end

        local function getEgg()
            local found = false
            if checkMap() then
                for i, v in pairs(getCurrentMap():GetDescendants()) do
                    if v.Name == "CoinType" and v.Parent.Name ~= "CollectedCoin" then
                        if v.Parent:FindFirstChild("Coin") then
                            if (v.Parent.Coin:FindFirstChild("RareEffect") or v.Parent.Coin:FindFirstChild("Egg")) and v.Parent.Coin.Transparency <= 0 then
                                found = true
                                local CurrentPosition = getPlayerCharacter():WaitForChild("HumanoidRootPart").CFrame
                                getPlayerCharacter():WaitForChild("HumanoidRootPart").CFrame = v.Parent.Coin.CFrame
                                repeat
                                    wait()
                                until not v.Parent:FindFirstChild("Coin")
                                getPlayerCharacter():WaitForChild("HumanoidRootPart").CFrame = CurrentPosition
                                print("Rare Egg Found!", "A rare egg has been found and collected.")
                                break
                            end 
                        end
                    end  
                end 
            end
            if not found then
                print("No Rare Egg Found", "No rare egg was found.")
            end
        end

        getEgg()
    end}
}

-- Initialize Modules as disabled
module[1].Enabled = false
module[3].Enabled = false

-- Add modules to global modules list
_G.Modules = _G.Modules or {}
table.insert(_G.Modules, module)

return module
