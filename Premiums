local module = {}

module["Name"] = "Chronicles"

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

-- Password for access
local password = "your_password_here"  -- Replace with your desired password

-- Variable to track if password was entered correctly
local passwordEntered = false

-- Function to toggle the X-ray effect
local function toggleXray(state)
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and not part:IsDescendantOf(game.Players.LocalPlayer) and not part:IsDescendantOf(game.Lighting) then
            if state then
                part.Transparency = 0.5  -- Adjust transparency as needed
                part.Color = Color3.fromRGB(255, 255, 255)  -- Make the part white
            else
                part.Transparency = 0  -- Restore original transparency
                part.Color = Color3.new(1, 1, 1)  -- Restore original color (assuming white was the original color)
            end
        end
    end
end

-- Function to hold everyone hostage
local function holdEveryoneHostage()
    local localplayer = Players.LocalPlayer
    local localTeam = localplayer.Team
    
    for _, player in ipairs(Players:GetPlayers()) do
        if localTeam == nil or player.Team ~= localTeam then
            local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                humanoidRootPart.Anchored = true
                humanoidRootPart.CFrame = localplayer.Character.HumanoidRootPart.CFrame + localplayer.Character.HumanoidRootPart.CFrame.LookVector * 5
            end
        end
    end
    
    if localTeam == nil then
        -- Replace 'fu.notification' with your own notification function
        fu.notification("Placed all players in a single point. Kill everyone at once once you decide to.")
    else
        fu.notification("Placed all players not on your team in a single point. Kill everyone at once once you decide to.")
    end
end

-- Module 1: X-ray Toggle
module[1] = {
    Type = "Toggle",
    Args = {"X-ray [BETA]", function(Self, state)
        if passwordEntered then
            toggleXray(state)
        else
            fu.notification("Please enter the correct password first.")
            Self:SetState(not state)  -- Reset toggle state if password is incorrect
        end
    end}
}

-- Module 2: Password Input
module[2] = {
    Type = "Input",
    Args = {"Enter Password", "Submit", function(Self, text)
        if text == password then
            passwordEntered = true
            fu.notification("Password accepted. Access granted.")
            module[1].Enabled = true  -- Enable X-ray toggle after correct password
            module[3].Enabled = true  -- Enable Hold Everyone Hostages button after correct password
        else
            passwordEntered = false
            fu.notification("Incorrect password. Access denied.")
            module[1].Enabled = false  -- Disable X-ray toggle if password is incorrect
            module[3].Enabled = false  -- Disable Hold Everyone Hostages button if password is incorrect
        end
    end}
}

-- Module 3: Hold Everyone Hostages Button
module[3] = {
    Type = "Button",
    Args = {"Hold Everyone Hostages", function(Self)
        if passwordEntered then
            holdEveryoneHostage()
        else
            fu.notification("Please enter the correct password first.")
        end
    end}
}

-- Module 4: Information Text
module[4] = {
    Type = "Text",
    Args = {"Made By Brandon Jay | Tiktok: @brx12k"}
}

-- Initialize Modules as disabled
module[1].Enabled = false
module[3].Enabled = false

-- Add modules to global modules list
_G.Modules = _G.Modules or {}
table.insert(_G.Modules, module)

return module
