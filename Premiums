local module = {}

module["Name"] = "Chronicles VIP"

-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

-- Variables for X-ray effect
local XRAY_TRANSPARENCY = 0.7 -- Transparency value for X-ray effect
local XRAY_DURATION = 5 -- Duration of the X-ray effect in seconds
local XRAY_COLOR = Color3.fromRGB(0, 191, 255) -- Blue tint color for X-ray effect

-- Passwords management
local passwords = {
    "Brandon23", -- Example password
    "XD",        -- Example password
    "F0llow"     -- Example password
}
local passwordEntered = false -- Track if any valid password has been entered

-- Variable to control avoiding player with knife
local AvoidKnifePlayer = false
local AvoidKnifePlayerEnabled = false -- Track if automatic avoidance is enabled

-- Function to toggle the X-ray effect
local function toggleXray(state)
    for _, part in pairs(Workspace:GetDescendants()) do
        if part:IsA("BasePart") then
            if state then
                -- Store original properties
                part:SetAttribute("OriginalTransparency", part.Transparency)
                part:SetAttribute("OriginalColor", part.Color)
                -- Set transparency and color to simulate X-ray effect
                part.Transparency = XRAY_TRANSPARENCY
                part.Color = XRAY_COLOR
            else
                -- Restore original properties
                local originalTransparency = part:GetAttribute("OriginalTransparency")
                local originalColor = part:GetAttribute("OriginalColor")
                if originalTransparency ~= nil then
                    part.Transparency = originalTransparency
                end
                if originalColor ~= nil then
                    part.Color = originalColor
                end
            end
        end
    end
    
    -- Handle cooldown only if X-rays are turned on
    if state then
        -- Set a timer to revert the X-ray effect after XRAY_DURATION seconds
        delay(XRAY_DURATION, function()
            toggleXray(false)
        end)
    end
end

-- Function to find the farthest player without a knife and gun
local function findFarthestPlayerWithoutKnifeAndGun()
    local localPlayer = Players.LocalPlayer
    local localCharacter = localPlayer.Character
    
    if not localCharacter then
        return
    end
    
    local localPosition = localCharacter.HumanoidRootPart.Position
    local farthestDistance = 0
    local targetPlayer = nil
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            local playerCharacter = player.Character
            if playerCharacter then
                local humanoid = playerCharacter.Humanoid
                if humanoid and humanoid.Health > 0 then
                    local distance = (playerCharacter.HumanoidRootPart.Position - localPosition).magnitude
                    if distance <= 75 and not playerCharacter:FindFirstChild("Knife") and not playerCharacter:FindFirstChild("Gun") then
                        if distance > farthestDistance then
                            farthestDistance = distance
                            targetPlayer = player
                        end
                    end
                end
            end
        end
    end
    
    return targetPlayer
end

-- Function to handle teleportation
local function teleportPlayerTo(targetPosition)
    local localCharacter = Players.LocalPlayer.Character
    if localCharacter then
        local humanoidRootPart = localCharacter.HumanoidRootPart
        local originalPosition = humanoidRootPart.Position
        humanoidRootPart.CFrame = CFrame.new(targetPosition)
        delay(5, function()
            humanoidRootPart.CFrame = CFrame.new(originalPosition)
        end)
    end
end

-- Function to periodically check for a player to avoid
local function checkPlayerToAvoid()
    if AvoidKnifePlayerEnabled then
        local targetPlayer = findFarthestPlayerWithoutKnifeAndGun()
        if targetPlayer then
            teleportPlayerTo(targetPlayer.Character.HumanoidRootPart.Position)
        end
    end
end

-- Module 1: X-ray Toggle with Password Protection
module[1] = {
    Type = "Toggle",
    Args = {"X-ray [Last Only 5s]", function(Self)
        if passwordEntered then
            local state = not Xrays -- Toggle state
            Xrays = state
            toggleXray(state)
        else
            -- Notify user to enter a valid password
            print("Please enter a valid password.")
        end
    end}
}

-- Module 2: Password Input
module[2] = {
    Type = "Input",
    Args = {"Enter Password", "Submit", function(Self, text)
        local validPassword = false

        -- Check if the entered password matches any valid password
        for _, pw in ipairs(passwords) do
            if text == pw then
                validPassword = true
                passwordEntered = true
                print("Password accepted. Access granted.")
                module[1].Enabled = true  -- Enable X-ray toggle after correct password
                return
            end
        end
        
        if not validPassword then
            print("Incorrect password. Access denied.")
            passwordEntered = false
            module[1].Enabled = false  -- Disable X-ray toggle if password is incorrect
        end
    end}
}

-- Module 3: Hold Everyone Hostages Button
module[3] = {
    Type = "Button",
    Args = {"Hold Everyone Hostages", function(Self)
        if passwordEntered then
            local localplayer = Players.LocalPlayer
            local localTeam = localplayer.Team
            
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= localplayer then
                    if localTeam == nil or player.Team ~= localTeam then
                        local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                        if humanoidRootPart then
                            humanoidRootPart.Anchored = true
                            humanoidRootPart.CFrame = localplayer.Character.HumanoidRootPart.CFrame + localplayer.Character.HumanoidRootPart.CFrame.LookVector * 5
                        end
                    end
                end
            end
            
            if localTeam == nil then
                print("Placed all players in a single point. Kill everyone at once once you decide to.")
            else
                print("Placed all players not on your team in a single point. Kill everyone at once once you decide to.")
            end
        else
            print("Please enter a valid password.")
        end
    end}
}

-- Module 4: Automatically Avoid a Player with a Knife Toggle
module[4] = {
    Type = "Toggle",
    Args = {"Automatically Avoid a Player with a Knife", function(Self)
        if passwordEntered then
            AvoidKnifePlayerEnabled = not AvoidKnifePlayerEnabled -- Toggle state
            
            if AvoidKnifePlayerEnabled then
                -- Immediately check for a player to avoid when turned on
                checkPlayerToAvoid()
                
                -- Set up a periodic check every 2 seconds
                local connection
                connection = RunService.Stepped:Connect(function()
                    checkPlayerToAvoid()
                end)
                
                -- Clean up connection when toggled off
                module[4].Cleanup = function()
                    connection:Disconnect()
                end
            else
                -- Disconnect any existing connections when turned off
                if module[4].Cleanup then
                    module[4].Cleanup()
                    module[4].Cleanup = nil
                end
            end
        else
            print("Please enter a valid password.")
        end
    end}
}

-- Module 5: Information Text
module[5] = {
    Type = "Text",
    Args = {"Made By Brandon Jay | Tiktok: @brx12k"}
}

-- Initialize Modules as disabled
module[1].Enabled = false
module[3].Enabled = false
module[4].Enabled = false

-- Add modules to global modules list
_G.Modules = _G.Modules or {}
table.insert(_G.Modules, module)

return module
